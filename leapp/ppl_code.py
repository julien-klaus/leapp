import pymc3 as pm
import theano.tensor as tt
def trace():
     with pm.Model() as model:
        Cylinders = pm.Categorical('Cylinders', p=[0.0102,0.5077,0.0077,0.2117,0.2628])
        Year = pm.Categorical('Year', p=[0.074,0.0689,0.0714,0.102,0.0663,0.0765,0.0867,0.0714,0.0918,0.074,0.0689,0.148])
        Origin = pm.Categorical('Origin', p=tt.switch(tt.eq(Cylinders, 3), [0.0,1.0,0.0], tt.switch(tt.eq(Cylinders, 4), [0.3065,0.3467,0.3467], tt.switch(tt.eq(Cylinders, 5), [1.0,0.0,0.0], tt.switch(tt.eq(Cylinders, 6), [0.0482,0.0723,0.8795], [0.0,0.0,1.0])))))
        Displacement = pm.Normal('Displacement', mu=tt.switch(tt.eq(Origin, 0), tt.switch(tt.eq(Cylinders, 3), 0.0, tt.switch(tt.eq(Cylinders, 4), 104.6066, tt.switch(tt.eq(Cylinders, 5), 145.0, tt.switch(tt.eq(Cylinders, 6), 159.75, 0.0)))), tt.switch(tt.eq(Origin, 1), tt.switch(tt.eq(Cylinders, 3), 72.5, tt.switch(tt.eq(Cylinders, 4), 99.7681, tt.switch(tt.eq(Cylinders, 5), 0.0, tt.switch(tt.eq(Cylinders, 6), 156.6667, 0.0)))), tt.switch(tt.eq(Cylinders, 3), 0.0, tt.switch(tt.eq(Cylinders, 4), 124.0507, tt.switch(tt.eq(Cylinders, 5), 0.0, tt.switch(tt.eq(Cylinders, 6), 226.6438, 345.0097)))))), sigma=tt.switch(tt.eq(Origin, 0), tt.switch(tt.eq(Cylinders, 3), 0.0, tt.switch(tt.eq(Cylinders, 4), 16.6536, tt.switch(tt.eq(Cylinders, 5), 33.2866, tt.switch(tt.eq(Cylinders, 6), 10.1119, 0.0)))), tt.switch(tt.eq(Origin, 1), tt.switch(tt.eq(Cylinders, 3), 5.0, tt.switch(tt.eq(Cylinders, 4), 16.9299, tt.switch(tt.eq(Cylinders, 5), 0.0, tt.switch(tt.eq(Cylinders, 6), 9.8522, 0.0)))), tt.switch(tt.eq(Cylinders, 3), 0.0, tt.switch(tt.eq(Cylinders, 4), 21.6082, tt.switch(tt.eq(Cylinders, 5), 0.0, tt.switch(tt.eq(Cylinders, 6), 24.6776, 46.7764)))))))
        Horsepower = pm.Normal('Horsepower', mu=tt.switch(tt.eq(Cylinders, 3), Displacement*1.4333+-4.6667, tt.switch(tt.eq(Cylinders, 4), Displacement*0.4385+30.1943, tt.switch(tt.eq(Cylinders, 5), Displacement*-0.056+90.4471, tt.switch(tt.eq(Cylinders, 6), Displacement*-0.0972+122.731, Displacement*0.4716+-4.394)))), sigma=tt.switch(tt.eq(Cylinders, 3), 5.1316, tt.switch(tt.eq(Cylinders, 4), 11.1217, tt.switch(tt.eq(Cylinders, 5), 26.1482, tt.switch(tt.eq(Cylinders, 6), 14.0449, 18.0621)))))
        Weight_in_lbs = pm.Normal('Weight_in_lbs', mu=tt.switch(tt.eq(Origin, 0), Displacement*18.0681+Horsepower*2.2696+269.7869, tt.switch(tt.eq(Origin, 1), Displacement*6.1691+Horsepower*9.7549+808.82, Displacement*7.02+Horsepower*1.0883+1505.3895)), sigma=tt.switch(tt.eq(Origin, 0), 223.2006, tt.switch(tt.eq(Origin, 1), 127.6937, 316.9252)))
        Acceleration = pm.Normal('Acceleration', mu=tt.switch(tt.eq(Origin, 0), Displacement*-0.0216+Horsepower*-0.1551+Weight_in_lbs*0.0058+17.4924, tt.switch(tt.eq(Origin, 1), Displacement*-0.0167+Horsepower*-0.101+Weight_in_lbs*0.0024+20.5671, Displacement*-0.0166+Horsepower*-0.0624+Weight_in_lbs*0.003+16.4242)), sigma=tt.switch(tt.eq(Origin, 0), 1.7318, tt.switch(tt.eq(Origin, 1), 1.3474, 1.6482)))
        Miles_per_Gallon = pm.Normal('Miles_per_Gallon', mu=tt.switch(tt.eq(Year, 1970), Weight_in_lbs*-0.0058+37.3993, tt.switch(tt.eq(Year, 1971), Weight_in_lbs*-0.0058+38.6492, tt.switch(tt.eq(Year, 1972), Weight_in_lbs*-0.0052+35.6747, tt.switch(tt.eq(Year, 1973), Weight_in_lbs*-0.0043+31.7108, tt.switch(tt.eq(Year, 1974), Weight_in_lbs*-0.0064+41.122, tt.switch(tt.eq(Year, 1975), Weight_in_lbs*-0.0055+37.6485, tt.switch(tt.eq(Year, 1976), Weight_in_lbs*-0.0067+42.0897, tt.switch(tt.eq(Year, 1977), Weight_in_lbs*-0.0069+44.1527, tt.switch(tt.eq(Year, 1978), Weight_in_lbs*-0.0097+51.6817, tt.switch(tt.eq(Year, 1979), Weight_in_lbs*-0.0083+50.5645, tt.switch(tt.eq(Year, 1980), Weight_in_lbs*-0.0106+59.7021, Weight_in_lbs*-0.0093+54.0915))))))))))), sigma=tt.switch(tt.eq(Year, 1970), 1.9503, tt.switch(tt.eq(Year, 1971), 2.6114, tt.switch(tt.eq(Year, 1972), 1.9023, tt.switch(tt.eq(Year, 1973), 2.2054, tt.switch(tt.eq(Year, 1974), 2.1968, tt.switch(tt.eq(Year, 1975), 2.6696, tt.switch(tt.eq(Year, 1976), 2.2074, tt.switch(tt.eq(Year, 1977), 2.1682, tt.switch(tt.eq(Year, 1978), 3.3768, tt.switch(tt.eq(Year, 1979), 2.7492, tt.switch(tt.eq(Year, 1980), 5.328, 3.5732))))))))))))
        return model
        return pm.sample(1000)